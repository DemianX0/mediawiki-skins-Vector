// FIXME: upstream to core 'mediawiki.mixins'

//
// Flex layout compatibility mixins
//

.flex-grow( @grow ) {
	// https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Mixins#Flexbox_grow
	-webkit-box-flex: @grow; // iOS 6-, Safari 3.1-6
	-moz-box-flex: @grow; // Firefox 21-
	-ms-flex-grow: @grow; // IE 10
	-webkit-flex-grow: @grow; // IE 10
	flex-grow: @grow;
}

.flex-order( @order ) when not ( order = none ) {
	// https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Mixins#Flexbox_order
	// Initial value: 0.
	-webkit-box-ordinal-group: @order; // iOS 6-, Safari 3.1-6
	-moz-box-ordinal-group: @order; // Firefox 21-
	-ms-flex-order: @order; // IE 10
	-webkit-order: @order;
	order: @order;
}

//
// Align (cross-axis) and justify (main-axis) compatibility mixins
//
// Sources:
// https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Mixins
// https://dev.opera.com/articles/advanced-cross-browser-flexbox/
// https://css-tricks.com/snippets/css/a-guide-to-flexbox/#flexbox-sass
// https://css-tricks.com/old-flexbox-and-new-flexbox/
//

//
// align-items
// align -> cross-axis, items -> single elements (within their row)
//

.align-items( @value: normal ) when ( default() ) {
	.mixin-flex-value-compat( @value );

	// https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Mixins#Flexbox_align_items
	// Old spec rules.
	-webkit-box-align: @value-compat;
	-moz-box-align: @value-compat;
	-ms-flex-align: @value-compat;
	// Latest spec.
	-webkit-align-items: @value;
	align-items: @value;
}

//
// align-content
// align -> cross-axis, content -> multiple elements (divide free space)
//

.align-content( @value: normal ) when ( default() ) {
	.mixin-flex-value-compat( @value );

	// https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Mixins#Flexbox_align_content
	// No Webkit box fallback.
	-webkit-align-content: @value;
	-ms-flex-line-pack: @value-compat;
	// Latest spec.
	align-content: @value;
}

//
// justify-content
// justify -> main-axis, content -> multiple elements (divide free space)
//

.justify-content( @value: normal ) when ( default() ) {
	.mixin-flex-value-compat( @value );

	// https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Mixins#Flexbox_justify_content
	// For 2009/2012 spec alignment consistency.
	-webkit-box-pack: @value-compat; // iOS 6-, Safari 3.1-6
	-moz-box-pack: @value-compat; // Firefox 21-
	-ms-flex-pack: @value-compat; // IE 10 (2012 spec)
	// Latest spec.
	-webkit-justify-content: @value;
	justify-content: @value;
}

//
// Map 2012 flex spec's justify values for older browsers
//
// Values not supported by Chrome, don't use these: left | right | start | end.
// Values not supported by this implementation that will fail to compile: safe | unsafe.
//
// Support:
// https://developer.mozilla.org/en-US/docs/Web/CSS/align-items#Browser_compatibility
// https://developer.mozilla.org/en-US/docs/Web/CSS/align-content#Browser_compatibility
// https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content#Browser_compatibility
// Grid only (use `margin-left: auto' for positioning):
// https://developer.mozilla.org/en-US/docs/Web/CSS/justify-items#Browser_compatibility
//
// The following features could be used to implement this map cleaner:
// - Variable variables in lookups
//   http://lesscss.org/features/#maps-feature-using-variable-variables-in-lookups
// - Detached rulesets, aka. "maps" in programming languages:
//   http://lesscss.org/features/#detached-rulesets-feature
// These seem to be broken (not implemented) in less.php.
//

// https://caniuse.com/#search=flex%20baseline
.mixin-flex-value-compat( @value ) when ( @value = ~'first baseline' ) {
	// Fallback value from: https://developer.mozilla.org/en-US/docs/Web/CSS/align-content#Values
	@value-compat: start;
}

.mixin-flex-value-compat( @value ) when ( @value = ~'last baseline' ) {
	@value-compat: end;
}

// Initial (default) value of justify-* properties: 'normal'.
.mixin-flex-value-compat( @value ) when ( @value = normal ), ( @value = stretch ) {
	@value-compat: stretch;
}

.mixin-flex-value-compat( @value ) when ( @value = center ), ( @value = baseline ) {
	@value-compat: center;
}

// RTL respecting values:
.mixin-flex-value-compat( @value ) when ( @value = start ), ( @value = flex-start ), ( @value = self-start ) {
	@value-compat: start;
}

.mixin-flex-value-compat( @value ) when ( @value = end ), ( @value = flex-end ), ( @value = self-end ) {
	@value-compat: end;
}

// 'space-between' is equivalent to 'justify', the rest are approximations.
.mixin-flex-value-compat( @value ) when ( @value = space-between ), ( @value = space-around ), ( @value = space-evenly ) {
	@value-compat: justify;
}

// There's no `when( default() )` so the compiler raises an error for unsupported values.
